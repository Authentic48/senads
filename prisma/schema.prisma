// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  uuid            String    @id @default(uuid()) @db.VarChar(36)
  email           String    @unique
  roles           Role[]
  sessions        Session[]
  isEmailVerified Boolean   @default(false) @map("is_email_verified")
  profile         Profile?
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")

  @@map("users")
}

model Session {
  uuid               String              @id @default(uuid()) @db.VarChar(36)
  user               User                @relation(fields: [userUUID], references: [uuid], onDelete: Cascade)
  userUUID           String              @map("user_uuid") @db.VarChar(36)
  deviceUUID         String              @unique @map("device_uuid") @db.VarChar(36)
  refreshToken       String              @unique @map("refresh_token") @db.VarChar(200)
  sessionAccessToken SessionAccessToken?
  createdAt          DateTime            @default(now()) @map("created_at")
  updatedAt          DateTime            @updatedAt @map("updated_at")
  expiredAt          DateTime            @map("expired_at")

  @@map("sessions")
}

model SessionAccessToken {
  accessTokenUUID String   @unique @map("access_token_uuid") @db.VarChar(36)
  sessionUUID     String?  @unique @map("session_uuid") @db.VarChar(36)
  session         Session? @relation(fields: [sessionUUID], references: [uuid], onDelete: Cascade)
  createdAt       DateTime @default(now()) @map("created_at")
  expiredAt       DateTime @map("expired_at")

  @@map("session_access_tokens")
}

model Role {
  uuid     String @id @default(uuid()) @db.VarChar(36)
  name     ERole  @default(BUSINESS)
  userUUID String @map("user_uuid") @db.VarChar(36)
  user     User   @relation(fields: [userUUID], references: [uuid], onDelete: Cascade)

  @@map("roles")
}

model Category {
  uuid          String        @id @default(uuid()) @db.VarChar(36)
  name          String        @unique
  subCategories SubCategory[]

  @@map("categories")
}

model SubCategory {
  uuid         String   @id @default(uuid()) @db.VarChar(36)
  name         String   @unique
  categoryUUID String   @map("category_uuid") @db.VarChar(36)
  category     Category @relation(fields: [categoryUUID], references: [uuid], onDelete: Cascade)
  ads          Ads[]

  @@map("sub_categories")
}

model Profile {
  uuid               String               @id @default(uuid()) @db.VarChar(36)
  name               String?
  description        String?
  phone              String?              @unique
  isPhoneVerified    Boolean              @default(false) @map("is_phone_verified")
  site               String?
  images             String[]
  city               City?
  address            String?
  userUUID           String               @unique @map("user_uuid") @db.VarChar(36)
  user               User                 @relation(fields: [userUUID], references: [uuid], onDelete: Cascade)
  ads                Ads[]
  profileSocialMedia ProfileSocialMedia[]
  createdAt          DateTime             @default(now()) @map("created_at")
  updatedAt          DateTime             @updatedAt @map("updated_at")

  @@map("profiles")
}

model Ads {
  uuid              String      @id @default(uuid()) @db.VarChar(36)
  title             String
  images            String[]
  description       String
  address           String?
  price             Int?
  conditions        ECondition?
  features          String[]
  brand             String?
  year              String?
  model             String?
  isPriceNegotiable Boolean?    @default(false) @map("is_price_negotiable")
  subCategoryUUID   String      @map("sub_category_uuid") @db.VarChar(36)
  subCategory       SubCategory @relation(fields: [subCategoryUUID], references: [uuid], onDelete: Cascade)
  profileUUID       String      @map("profile_uuid") @db.VarChar(36)
  profile           Profile     @relation(fields: [profileUUID], references: [uuid], onDelete: Cascade)
  createdAt         DateTime    @default(now()) @map("created_at")
  updatedAt         DateTime    @updatedAt @map("updated_at")
  city              City?
  status            EAdStatus   @default(ACTIVE)

  @@map("ads")
}

model Region {
  id     Int    @id @default(autoincrement())
  title  String
  cities City[]

  @@map("regions")
}

model City {
  id          Int      @id @default(autoincrement())
  title       String
  area        String?
  regionID    Int?     @map("region_id")
  region      Region?  @relation(fields: [regionID], references: [id], onDelete: Cascade)
  profileUUID String?  @unique @map("profile_uuid") @db.VarChar(36)
  profile     Profile? @relation(fields: [profileUUID], references: [uuid], onDelete: Cascade)
  adUUID      String?  @unique @map("ad_uuid") @db.VarChar(36)
  ad          Ads?     @relation(fields: [adUUID], references: [uuid], onDelete: Cascade)

  @@map("cities")
}

model ProfileSocialMedia {
  uuid        String           @id @default(uuid()) @db.VarChar(36)
  network     ESocialMediaType
  url         String
  profileUUID String?          @map("profile_uuid") @db.VarChar(36)
  profile     Profile?         @relation(fields: [profileUUID], references: [uuid], onDelete: Cascade)

  @@unique([profileUUID, network])
  @@map("profile_social_medias")
}

enum ERole {
  BUSINESS
  ADMIN
  MANAGER
}

enum ECondition {
  NEW
  USED
}

enum ESocialMediaType {
  FACEBOOK
  INSTAGRAM
  LINKEDIN
  TIKTOK
  WHATSAPP
  TELEGRAM
  YT
}

enum EAdStatus {
  ACTIVE
  EXPIRED
}
